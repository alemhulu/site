 var url =$('#path').val();
 var numPages = 0;
 var myState = {
            pdf: null,
            currentPage: 1,
            zoom: .5
            
        }
      
        pdfjsLib.getDocument(url).then((pdf) => {
      
            myState.pdf = pdf;
            numPages = myState.pdf.numPages;
        
             //Start with first page
        pdf.getPage( 1 ).then( handlePages );
 
        });

 /*
 var currPage = 1; //Pages are 1-based not 0-based
var numPages = 0;
var thePDF = null;

//This is where you start
PDFJS.getDocument(url).then(function(pdf) {

        //Set PDFJS global object (so we can easily access in our page functions
        thePDF = pdf;

        //How many pages it has
        numPages = pdf.numPages;

        //Start with first page
        pdf.getPage( 1 ).then( handlePages );
});



function handlePages(page)
{
    //This gives us the page's dimensions at full scale
    var viewport = page.getViewport( 1 );

    //We'll create a canvas for each page to draw it on
    var canvas = document.createElement( "canvas" );
    canvas.style.display = "block";
    var context = canvas.getContext('2d');
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    //Draw it on the canvas
    page.render({canvasContext: context, viewport: viewport});

    //Add it to the web page
    document.body.appendChild( canvas );

    //Move to next page
    currPage++;
    if ( thePDF !== null && currPage <= numPages )
    {
        thePDF.getPage( currPage ).then( handlePages );
    }
}
 */

function handlePages(page)
{
    //This gives us the page's dimensions at full scale
    var viewport = page.getViewport( 1 );

    //We'll create a canvas for each page to draw it on
    var canvas = document.createElement( "canvas" );
    canvas.style.display = "block";
    var context = canvas.getContext('2d');
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    //Draw it on the canvas
    page.render({canvasContext: context, viewport: viewport});

    //Add it to the web page
    document.body.appendChild( canvas );

    //Move to next page
    myState.currentPage++;
    if ( myState.pdf !== null && myState.currentPage <= numPages )
    {
        myState.pdf.getPage( myState.currentPage ).then( handlePages );
    }
}
        function render() {
            myState.pdf.getPage(myState.currentPage).then((page) => {
          
                var canvas = document.getElementById("pdf-render");
                var ctx = canvas.getContext('2d');
      
                var viewport = page.getViewport(myState.zoom);
 
                canvas.width = viewport.width;
                canvas.height = viewport.height;
          
                page.render({
                    canvasContext: ctx,
                    viewport: viewport
                });
                 document.querySelector('#page-num').textContent = myState.currentPage;
                 document.querySelector('#page-count').textContent = numPages;
            });
        }
       
        document.getElementById('prev-page').addEventListener('click', (e) => {
            if(myState.pdf == null || myState.currentPage == 1) 
              return;
            myState.currentPage -= 1;
            document.getElementById("current_page").value = myState.currentPage;
             document.querySelector('#page-num').textContent = myState.currentPage;
             document.querySelector('#page-count').textContent = numPages;
            render();
        });
 
        document.getElementById('next-page').addEventListener('click', (e) => {
            if(myState.pdf == null || myState.currentPage > myState.pdf._pdfInfo.numPages) 
               return;
            myState.currentPage += 1;
            document.getElementById("current_page").value = myState.currentPage;
             document.querySelector('#page-num').textContent = myState.currentPage;
             document.querySelector('#page-count').textContent = numPages;
            render();
        });
 
        document.getElementById('current_page').addEventListener('keypress', (e) => {
            if(myState.pdf == null) return;
          
            // Get key code
            var code = (e.keyCode ? e.keyCode : e.which);
          
            // If key code matches that of the Enter key
            if(code == 13) {
                var desiredPage = 
                document.getElementById('current_page').valueAsNumber;
                                  
                if(desiredPage >= 1 && desiredPage <= myState.pdf._pdfInfo.numPages) {
                    myState.currentPage = desiredPage;
                    document.getElementById("current_page").value = desiredPage;
                    render();
                }
            }
        });
 
        document.getElementById('zoom_in').addEventListener('click', (e) => {
            if(myState.pdf == null) return;
            myState.zoom += 0.5;
            render();
        });
 
        document.getElementById('zoom_out').addEventListener('click', (e) => {
            if(myState.pdf == null) return;
            myState.zoom -= 0.5;
            render();
        });






















// const url =$('#path').val();

// let pdfDoc = null,
//   pageNum = 1,
//   pageIsRendering = false,
//   scale=.6,
//   pageNumIsPending = null,
  


 
// // Render the page
// const renderPage = num => {
//   render();
//   pageIsRendering = true;

//   // Get page
//   pdfDoc.getPage(num).then(page => {
//     // Set scale
//     const viewport = page.getViewport({ scale });
//     canvas.height = viewport.height;
//     canvas.width = viewport.width;

//     const renderCtx = {
//       canvasContext: ctx,
//       viewport
//     };

//     page.render(renderCtx).promise.then(() => {
//       pageIsRendering = false;

//       if (pageNumIsPending !== null) {
//         renderPage(pageNumIsPending);
//         pageNumIsPending = null;
//       }
//     });

//     // Output current page
//     document.querySelector('#page-num').textContent = num;
   
//   });
// };
//  function render() {
//       canvas = document.querySelector('#pdf-render');
//   ctx = canvas.getContext('2d');
//             pdfDoc.getPage(pageNum).then((page) => {
      
//                 var viewport = page.getViewport({scale});
 
//                 canvas.width = viewport.width;
//                 canvas.height = viewport.height;
          
//                 page.render({
//                     canvasContext: ctx,
//                     viewport: viewport
//                 });
//             });
//           }

// // Check for pages rendering
// const queueRenderPage = num => {
//   if (pageIsRendering) {
//     pageNumIsPending = num;
//   } else {
//     renderPage(num);
//   }
// };

// // Show Prev Page
// const showPrevPage = () => {
//   if (pageNum <= 1) {
//     return;
//   }
//   pageNum--;
//   queueRenderPage(pageNum);
// };

// // Show Next Page
// const showNextPage = () => {
//   if (pageNum >= pdfDoc) {
//     return;
//   }
//   pageNum++;
//   queueRenderPage(pageNum);
// };
//   document.getElementById('zoom_in').addEventListener('click', (e) => {
//             if(pdfDoc == null) return;
//             scale += 0.5;
//             render();
//         });
 
//         document.getElementById('zoom_out').addEventListener('click', (e) => {
//             if(pdfDoc == null) return;
//             scale -= 0.5;
//             render();
//         });

// // Get Document
// pdfjsLib
//   .getDocument(url)
//   .promise.then(pdfDoc_ => {
//     pdfDoc = pdfDoc_;

//     document.querySelector('#page-count').textContent = pdfDoc.numPages;

//     renderPage(pageNum);
//   })
//   .catch(err => {
//     // Display error
//     const div = document.createElement('div');
//     div.className = 'error';
//     div.appendChild(document.createTextNode(err.message));
//     document.querySelector('body').insertBefore(div, canvas);
//     // Remove top bar
//     document.querySelector('.top-bar').style.display = 'none';
//   });

// // Button Events
// document.querySelector('#prev-page').addEventListener('click', showPrevPage);
// document.querySelector('#next-page').addEventListener('click', showNextPage);

//         document.getElementById('go_previous').addEventListener('click', (e) => {
//             if(myState.pdf == null || myState.currentPage == 1) 
//               return;
//             myState.currentPage -= 1;
//             document.getElementById("current_page").value = myState.currentPage;
//             render();
//         });
 
//         document.getElementById('go_next').addEventListener('click', (e) => {
//             if(myState.pdf == null || myState.currentPage > myState.pdf._pdfInfo.numPages) 
//                return;
//             myState.currentPage += 1;
//             document.getElementById("current_page").value = myState.currentPage;
//             render();
//         });
 
//         document.getElementById('current_page').addEventListener('keypress', (e) => {
//             if(myState.pdf == null) return;
          
//             // Get key code
//             var code = (e.keyCode ? e.keyCode : e.which);
          
//             // If key code matches that of the Enter key
//             if(code == 13) {
//                 var desiredPage = 
//                 document.getElementById('current_page').valueAsNumber;
                                  
//                 if(desiredPage >= 1 && desiredPage <= myState.pdf._pdfInfo.numPages) {
//                     myState.currentPage = desiredPage;
//                     document.getElementById("current_page").value = desiredPage;
//                     render();
//                 }
//             }
//         });
 
//        